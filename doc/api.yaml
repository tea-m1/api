openapi: "3.0.3"
info:
  title: TEAM MAIN
  version: "latest"
servers:
  - url: http://localhost:8080
    description: Local environment
  - url: https://api.server.test
    description: Production server
security:
  - BearerAuth: []

paths:
  "/ping":
    get:
      tags:
        - "Health"
      operationId: ping
      security: []
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: pong

  "/auth/login/":
    post:
      tags:
        - "Authentication"
      description: |
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      security: []
      operationId: login
      summary: Login connexion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenPair"

  "/users/whoami/":
    get:
      tags:
        - "Authentication"
      operationId: whoami
      summary: Whois the account related by the provided token
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Whoami"

  "/auth/verify/":
    post:
      operationId: verifyToken
      description: |
        Takes a token and indicates if it is valid. This view provides no
        information about a token's fitness for a particular use.
      tags:
        - "Authentication"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenVerify"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenVerify"
          description: Ok
        "401":
          description: Unauthorized. Return when the token is invalid or expired.
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "Token is invalid or expired"
                  code:
                    type: string
                    example: "token_not_valid"

  "/users/signup/":
    post:
      tags:
        - "Account"
      operationId: signup
      summary: Register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Whoami"

  "/users/set_password/":
    post:
      operationId: changePassword
      tags:
        - "Account"
      summary: Change the password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetPassword"
      responses:
        "204":
          description: No Content

  "/users/set_username/":
    post:
      operationId: changeUsername
      tags:
        - "Account"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetUsername"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/SetUsername"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetUsername"

  "/auth/refresh/":
    post:
      operationId: refreshToken
      description: |
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
        - "Authentication"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenRefresh"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenRefresh"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TokenRefresh"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRefresh"
          description: ""

  "/users/":
    summary: For all operations specific to users globally
    get:
      tags:
        - "Account"
      operationId: getUsers
      description: Only admin users are allowed to get all users
      parameters:
        - name: username
          in: query
          schema:
            type: string
          description: User that the username contains the lookup value
        - name: role
          in: query
          description: Search for the user that has the specified role
          schema:
            $ref: "#/components/schemas/UserRole"
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
            default: 15
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CreateUser"

  "/species":
    get:
      tags:
        - "Biodiversity"
      summary: List all species
      responses:
        "200":
          description: A list of species
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Species'
    post:
      tags:
        - "Biodiversity"
      summary: Add a new species
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Species'
      responses:
        "201":
          description: Species created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Species'

  "/species/{id}":
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "Biodiversity"
      summary: Get species by ID
      responses:
        "200":
          description: Details of a species
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Species'
    put:
      tags:
        - "Biodiversity"
      summary: Update a species
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Species'
      responses:
        "200":
          description: Species updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Species'
    delete:
      tags:
        - "Biodiversity"
      summary: Delete a species
      responses:
        "204":
          description: Species deleted

  "/places":
    get:
      tags:
        - "Biodiversity"
      summary: List all places
      responses:
        "200":
          description: A list of places
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Place'
    post:
      tags:
        - "Biodiversity"
      summary: Add a new place
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Place'
      responses:
        "201":
          description: Place created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'

  "/places/{id}":
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "Biodiversity"
      summary: Get place by ID
      responses:
        "200":
          description: Details of a place
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
    put:
      tags:
        - "Biodiversity"
      summary: Update a place
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Place'
      responses:
        "200":
          description: Place updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
    delete:
      tags:
        - "Biodiversity"
      summary: Delete a place
      responses:
        "204":
          description: Place deleted

  "/products":
    get:
      tags:
        - "E-Commerce"
      summary: List all products
      responses:
        "200":
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags:
        - "E-Commerce"
      summary: Add a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        "201":
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  "/products/{id}":
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "E-Commerce"
      summary: Get product by ID
      responses:
        "200":
          description: Details of a product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      tags:
        - "E-Commerce"
      summary: Update a product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        "200":
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      tags:
        - "E-Commerce"
      summary: Delete a product
      responses:
        "204":
          description: Product deleted

  "/orders":
    post:
      tags:
        - "E-Commerce"
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        "201":
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    Whoami:
      allOf:
        - type: object
        - $ref: "#/components/schemas/GetUserProfile"
      properties:
        userId:
          type: string
          format: uuid
          readOnly: true
        exp:
          type: integer

    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
        - token

    UserRole:
      type: string
      enum: [ADMIN, USER]

    SetPassword:
      type: object
      properties:
        new_password:
          type: string
        current_password:
          type: string
      required:
        - current_password
        - new_password

    SetUsername:
      type: object
      properties:
        current_password:
          type: string
        new_username:
          type: string
          title: Username
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
        - current_password
        - new_username

    Activation:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
      required:
        - token
        - uid

    TokenPair:
      type: object
      properties:
        access:
          type: string
          description: Access token
          readOnly: true
        refresh:
          type: string
          description: Refresh token
          readOnly: true

    TokenRefresh:
      type: object
      properties:
        access:
          type: string
        refresh:
          type: string

    Species:
      type: object
      required:
        - id
        - name
        - type
        - description
        - entityType
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
        description:
          type: string
        image:
          type: string
          format: uri
        entityType:
          type: string
          enum:
            - Animal
            - Plant
          description: The type of entity (e.g., Animal or Plant)

    Place:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        location:
          $ref: '#/components/schemas/Location'

    User:
      required:
        - id
        - firstName
        - lastName
        - phone
        - address
        - gender
        - birthDate
        - birthPlace
      properties:
        id:
          type: string
        lastName:
          type: string
        firstName:
          type: string
        phone:
          type: string
        email:
          type: string
          format: email
        address:
          type: string
        registrationDate:
          type: string
          format: date-time
        gender:
          type: string
          enum:
            - MALE
            - FEMALE

    GetUserProfile:
      allOf:
        - $ref: "#/components/schemas/User"
      properties:
        username:
          type: string
          description: Username of the user associated with this user profile

    CreateUser:
      allOf:
        - $ref: "#/components/schemas/User"

    Location:
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
        longitude:
          type: number

    UserLogin:
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        image:
          type: string

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        quantity:
          type: integer
        totalAmount:
          type: number
          format: float
        status:
          type: string
          enum:
            - PENDING
            - COMPLETED
            - CANCELLED